import { ACTION_ICON, ACTION_SHORT_SUMMARY } from '../constants'
import { Alert } from '../entities'
import { IncomingWebhook } from '@slack/webhook'
import { KnownBlock } from '@slack/types'

const createSummaryBlock = (
  alertCount: number,
  repositoryName: string,
  repositoryOwner: string,
): KnownBlock => {
  return {
    type: 'section',
    text: {
      type: 'mrkdwn',
      text: `You have ${alertCount} vulnerabilities in *${repositoryOwner}/${repositoryName}*`,
    },
  }
}

const createDividerBlock = (): KnownBlock => {
  return {
    type: 'divider',
  }
}

// const createAlertBlock = (alert: Alert): KnownBlock => {
//   return {
//     type: 'section',
//     text: {
//       type: 'mrkdwn',
//       text: `
// *Package name:* ${alert.packageName}
// *Vulnerability Version Range:* ${alert.vulnerability?.vulnerableVersionRange}
// *Patched Version:* ${alert.vulnerability?.firstPatchedVersion}
// *Severity:* ${alert.advisory?.severity}
// *Summary:* ${alert.advisory?.summary}
//             `,
//     },
//     accessory: {
//       type: 'button',
//       text: {
//         type: 'plain_text',
//         text: 'View Advisory',
//         emoji: true,
//       },
//       style: 'danger',
//       url: alert.advisory?.url,
//     },
//   }
// }

const createAlertsSummaryBlock = (
  CRITICAL: number,
  HIGH: number,
  MODERATE: number,
  LOW: number,
  repositoryName: string,
  repositoryOwner: string,
): KnownBlock => {
  let output_text = ''
  if (CRITICAL > 0) {
    output_text += `*CRITICAL:* ${CRITICAL}
  `
  }
  if (HIGH > 0) {
    output_text += `*HIGH:* ${HIGH}
  `
  }
  if (MODERATE > 0) {
    output_text += `*MODERATE:* ${MODERATE}
  `
  }
  if (LOW > 0) {
    output_text += `*LOW:* ${LOW}
  `
  }
  return {
    type: 'section',
    text: {
      type: 'mrkdwn',
      text: `${output_text}`,
    },
    accessory: {
      type: 'button',
      text: {
        type: 'plain_text',
        text: 'View Advisory',
        emoji: true,
      },
      style: 'danger',
      url: `https://github.com/${repositoryOwner}/${repositoryName}/security/dependabot`,
    },
  }
}

export const validateSlackWebhookUrl = (url: string): boolean => {
  const regexPattern = new RegExp(
    /^https:\/\/hooks\.slack\.com\/services\/T[a-zA-Z0-9_]{8,10}\/B[a-zA-Z0-9_]{10}\/[a-zA-Z0-9_]{24}/,
  )
  return regexPattern.test(url)
}

export const sendAlertsToSlack = async (
  webhookUrl: string,
  alerts: Alert[],
): Promise<void> => {
  const webhook = new IncomingWebhook(webhookUrl)
  // const alertBlocks: KnownBlock[] = []
  // for (const alert of alerts) {
  //   alertBlocks.push(createAlertBlock(alert))
  // }
  let CRITICAL = 0
  let HIGH = 0
  let MODERATE = 0
  let LOW = 0
  for (const alert of alerts) {
    switch (alert.advisory?.severity) {
      case 'CRITICAL': {
        CRITICAL++
        break
      }
      case 'HIGH': {
        HIGH++
        break
      }
      case 'MODERATE': {
        MODERATE++
        break
      }
      case 'LOW': {
        LOW++
        break
      }
    }
  }
  await webhook.send({
    blocks: [
      createSummaryBlock(
        alerts.length,
        alerts[0].repository.name,
        alerts[0].repository.owner,
      ),
      createDividerBlock(),
      // ...alertBlocks,
      createAlertsSummaryBlock(
        CRITICAL,
        HIGH,
        MODERATE,
        LOW,
        alerts[0].repository.name,
        alerts[0].repository.owner,
      ),
    ],
    icon_url: ACTION_ICON,
    username: ACTION_SHORT_SUMMARY,
  })
}
